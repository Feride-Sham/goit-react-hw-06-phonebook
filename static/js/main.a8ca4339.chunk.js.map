{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","redux/contacts/contacts-actions.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","id","addContact","createAction","name","number","payload","deleteContact","changeFilter","ContactForm","state","handleInputChange","ev","target","value","setState","handleSubmit","preventDefault","contacts","props","Number","isNaN","alert","find","item","onSubmit","resetForm","this","className","s","container","label","type","onChange","btnSubmit","Component","connect","items","dispatch","contact","contactsActions","filterValue","filter","onToFilter","filterContacts","normFilter","toLowerCase","includes","contactList","onDeleteContact","map","btn","onClick","App","createReducer","_","combineReducers","contactsPersistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.a8ca4339.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactList_item__11fmu\",\"btn\":\"ContactList_btn__fpRcs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Filter_container__2JRkC\"};","import { v4 as id } from \"uuid\";\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n// import types from \"./contacts-types\";\r\nid();\r\n\r\n//  ****after\r\nconst addContact = createAction(\"contacts/add\", ({ name, number }) => ({\r\n  payload: {\r\n    id: id(),\r\n    name,\r\n    number,\r\n  },\r\n}));\r\n\r\nconst deleteContact = createAction(\"contacts/delete\");\r\n\r\nconst changeFilter = createAction(\"contacts/cangeFilter\");\r\n\r\n//  ****before\r\n// const addContact = ({ name, number }) => ({\r\n//   type: types.ADD,\r\n//   payload: {\r\n//     id: id(),\r\n//     name,\r\n//     number,\r\n//   },\r\n// });\r\n\r\n// const deleteContact = (contactId) => ({\r\n//   type: types.DELETE,\r\n//   payload: contactId,\r\n// });\r\n\r\n// const changeFilter = (value) => ({\r\n//   type: types.CHANGE_FILTER,\r\n//   payload: value,\r\n// });\r\n\r\nexport default { addContact, deleteContact, changeFilter };\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport contactsActions from \"../../redux/contacts/contacts-actions\";\r\n\r\nimport s from \"./ContactForm.module.css\";\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  // записывает данные введенные в форме\r\n  handleInputChange = (ev) => {\r\n    const { name, value } = ev.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  // отправляет данные введеные в форме\r\n  handleSubmit = (ev) => {\r\n    ev.preventDefault();\r\n    const { number, name } = this.state;\r\n    const { contacts } = this.props;\r\n\r\n    if (Number.isNaN(+number)) {\r\n      alert(\"Извините, номер телефона может содержать только цифры \");\r\n      return;\r\n    }\r\n\r\n    const uniqueContact = contacts.find((item) => item.name === name);\r\n    if (uniqueContact) {\r\n      alert(`${name} уже есть в списке ваших контактов`);\r\n      return;\r\n    }\r\n\r\n    if (name === \"\" || number === \"\") {\r\n      alert(\"Необходимо заполнить имя и телефон контакта\");\r\n      return;\r\n    }\r\n\r\n    this.props.onSubmit(this.state);\r\n    this.resetForm();\r\n  };\r\n\r\n  // очищает форму после отправки\r\n  resetForm = () => {\r\n    this.setState({\r\n      name: \"\",\r\n      number: \"\",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <form className={s.container} onSubmit={this.handleSubmit}>\r\n        <label className={s.label}>\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={name}\r\n            onChange={this.handleInputChange}\r\n          />\r\n        </label>\r\n        <label className={s.label}>\r\n          Phone\r\n          <input\r\n            type=\"text\"\r\n            name=\"number\"\r\n            value={number}\r\n            onChange={this.handleInputChange}\r\n          />\r\n        </label>\r\n        <button className={s.btnSubmit} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: state.contacts.items,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onSubmit: (contact) => dispatch(contactsActions.addContact(contact)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport contactsActions from \"../../redux/contacts/contacts-actions\";\r\nimport s from \"./Filter.module.css\";\r\n\r\nconst Filter = ({ filterValue, onToFilter }) => {\r\n  return (\r\n    <form className={s.container}>\r\n      <label>\r\n        Find contacts by name{\" \"}\r\n        <input type=\"text\" value={filterValue} onChange={onToFilter} />\r\n      </label>\r\n    </form>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  filterValue: PropTypes.string.isRequired,\r\n  onToFilter: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  filterValue: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onToFilter: (ev) => dispatch(contactsActions.changeFilter(ev.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport contactsActions from \"../../redux/contacts/contacts-actions\";\r\n\r\nimport s from \"./ContactList.module.css\";\r\n\r\nconst ContactList = ({ contactList, onDeleteContact }) => {\r\n  return (\r\n    <ul>\r\n      {contactList.map(({ id, name, number }) => (\r\n        <li className={s.item} key={id}>\r\n          <p>{name}: </p> <p>{number}</p>\r\n          <button\r\n            className={s.btn}\r\n            type=\"button\"\r\n            onClick={() => onDeleteContact(id)}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contactList: PropTypes.array.isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\n//функция фильтрации контактов\r\nconst filterContacts = (contacts, filter) => {\r\n  const normFilter = filter.toLowerCase();\r\n  return contacts.filter((contact) =>\r\n    contact.name.toLowerCase().includes(normFilter)\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n  contactList: filterContacts(items, filter),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onDeleteContact: (id) => dispatch(contactsActions.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from \"react\";\nimport ContactForm from \"./components/ContactForm\";\nimport Filter from \"./components/Filter\";\nimport ContactList from \"./components/ContactList\";\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default App;\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport contactsActions from \"./contacts-actions\";\r\n// import types from \"./contacts-types\";\r\n\r\n//  ****after\r\nconst items = createReducer([], {\r\n  [contactsActions.addContact]: (state, { payload }) => [...state, payload],\r\n  [contactsActions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [contactsActions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\n//  ****before\r\n// const items = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD:\r\n//       return [...state, payload];\r\n\r\n//     case types.DELETE:\r\n//       return state.filter((contact) => contact.id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (state = \"\", { type, payload }) => {\r\n//   switch (type) {\r\n//     case \"contacts/cangeFilter\":\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport logger from \"redux-logger\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\n// import { combineReducers } from \"redux\";\r\n// import { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport contactsReducer from \"./contacts/contacts-reducer\";\r\n\r\n//  ****after\r\nconst contactsPersistConfig = {\r\n  key: \"contacts\",\r\n  storage,\r\n  blacklist: [\"filter\"],\r\n};\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\nconst persistor = persistStore(store);\r\n\r\n//  ****before\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactsReducer,\r\n// });\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\nexport default { store, persistor };\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport \"modern-normalize/modern-normalize.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={\"Загружаем\"} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactForm_container__khPiU\"};"],"sourceRoot":""}