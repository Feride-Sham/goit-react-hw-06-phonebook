{"version":3,"sources":["components/Filter/Filter.module.css","components/ContactForm/ContactForm.module.css","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","index.js","components/ContactList/ContactList.module.css"],"names":["module","exports","ContactForm","state","name","number","handleInputChange","ev","target","value","setState","handleSubmit","preventDefault","Number","isNaN","alert","props","onSubmit","resetForm","this","className","s","container","label","type","onChange","btnSubmit","Component","Filter","filterValue","onToFilter","ContactList","contactList","onDeleteContact","map","id","item","btn","onClick","App","contacts","filter","formSubmitHandler","contact","find","toLowerCase","prevState","deleteContact","contactId","toChangeFilter","currentTarget","renderFilteredContacts","normFilter","includes","localStorage","getItem","parsedContacts","JSON","parse","prevProps","setItem","stringify","filteredContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9cba6ca.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Filter_container__2JRkC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactForm_container__khPiU\"};","import React, { Component } from \"react\";\r\nimport s from \"./ContactForm.module.css\";\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  // записывает данные введенные в форме\r\n  handleInputChange = (ev) => {\r\n    const { name, value } = ev.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  // отправляет данные введеные в форме\r\n  handleSubmit = (ev) => {\r\n    ev.preventDefault();\r\n    const { number } = this.state;\r\n    if (Number.isNaN(+number)) {\r\n      alert(\"Sorry! Phone number must contain only numbers \");\r\n      return;\r\n    }\r\n    this.props.onSubmit(this.state);\r\n    this.resetForm();\r\n  };\r\n\r\n  // очищает форму после отправки\r\n  resetForm = () => {\r\n    this.setState({\r\n      name: \"\",\r\n      number: \"\",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <form className={s.container} onSubmit={this.handleSubmit}>\r\n        <label className={s.label}>\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={name}\r\n            onChange={this.handleInputChange}\r\n          />\r\n        </label>\r\n        <label className={s.label}>\r\n          Phone\r\n          <input\r\n            type=\"text\"\r\n            name=\"number\"\r\n            value={number}\r\n            onChange={this.handleInputChange}\r\n          />\r\n        </label>\r\n        <button className={s.btnSubmit} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactForm;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport s from \"./Filter.module.css\";\r\n\r\nconst Filter = ({ filterValue, onToFilter }) => {\r\n  return (\r\n    <form className={s.container}>\r\n      <label>\r\n        Find contacts by name{\" \"}\r\n        <input type=\"text\" value={filterValue} onChange={onToFilter} />\r\n      </label>\r\n    </form>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  filterValue: PropTypes.string.isRequired,\r\n  onToFilter: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport s from \"./ContactList.module.css\";\r\n\r\nconst ContactList = ({ contactList, onDeleteContact }) => {\r\n  return (\r\n    <ul>\r\n      {contactList.map(({ id, name, number }) => (\r\n        <li className={s.item} key={id}>\r\n          <p>{name}: </p> <p>{number}</p>\r\n          <button\r\n            className={s.btn}\r\n            type=\"button\"\r\n            onClick={() => onDeleteContact(id)}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contactList: PropTypes.array.isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n","import React, { Component } from \"react\";\nimport { v4 as id } from \"uuid\";\nimport ContactForm from \"./components/ContactForm\";\nimport Filter from \"./components/Filter\";\nimport ContactList from \"./components/ContactList\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: \"\",\n  };\n\n  componentDidMount() {\n    const contacts = localStorage.getItem(\"contacts\");\n    const parsedContacts = JSON.parse(contacts);\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n    }\n  }\n\n  // перезаписывает массив контактов и\n  // запрещает сохранить уже существующий контакт\n  formSubmitHandler = ({ name, number }) => {\n    const { contacts } = this.state;\n    const contact = {\n      id: id(),\n      name,\n      number,\n    };\n\n    if (\n      contacts.find(\n        (contact) => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      alert(`${name} уже есть в списке ваших контактов`);\n      return;\n    }\n    this.setState((prevState) => ({\n      contacts: [contact, ...prevState.contacts],\n    }));\n  };\n\n  // удаляет контакты\n  deleteContact = (contactId) => {\n    this.setState((prevState) => ({\n      contacts: prevState.contacts.filter(\n        (contact) => contact.id !== contactId\n      ),\n    }));\n  };\n\n  // получает введенное значение из фильтра\n  toChangeFilter = (ev) => {\n    this.setState({ filter: ev.currentTarget.value });\n  };\n\n  // отрисовывает контакту по значению из фильтра\n  renderFilteredContacts = () => {\n    const { contacts, filter } = this.state;\n    const normFilter = filter.toLowerCase();\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normFilter)\n    );\n  };\n\n  render() {\n    const { filter } = this.state;\n    const {\n      formSubmitHandler,\n      toChangeFilter,\n      deleteContact,\n      renderFilteredContacts,\n    } = this;\n    const filteredContacts = renderFilteredContacts();\n\n    return (\n      <div className=\"App\">\n        <h1>Phonebook</h1>\n        <ContactForm onSubmit={formSubmitHandler} />\n\n        <h2>Contacts</h2>\n        <Filter filterValue={filter} onToFilter={toChangeFilter} />\n        <ContactList\n          contactList={filteredContacts}\n          onDeleteContact={deleteContact}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"modern-normalize/modern-normalize.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactList_item__11fmu\",\"btn\":\"ContactList_btn__fpRcs\"};"],"sourceRoot":""}